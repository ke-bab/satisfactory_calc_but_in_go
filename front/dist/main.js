/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./front/src/main.js":
/*!***************************!*\
  !*** ./front/src/main.js ***!
  \***************************/
/***/ (() => {

eval("\n\nclass Position {\n    /** @type {number} */\n    x\n    /** @type {number} */\n    y\n\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\n/**\n * @param {RecipeNode} recipeNode\n */\nfunction removeRecipeNodesDivsRecursive(recipeNode) {\n    recipeNode.childNodes.forEach((childNode) => {\n        removeRecipeNodesDivsRecursive(childNode)\n    })\n    recipeNode.cell.nodeControl.remove()\n    recipeNode.cell.remove()\n}\n\nclass RecipeNode {\n    /** @type {Recipe} */\n    recipe\n    /** @type {number} */\n    multiplier = 1.0\n    /** @type {?HTMLElement} */\n    cell = null\n    size = 1\n    /** @type {?RecipeNode} */\n    parentNode = null\n    mainProduct = ''\n    /** @type {RecipeNode[]} */\n    childNodes = []\n\n    /**\n     * @param {Recipe} recipe\n     */\n    constructor(recipe) {\n        this.recipe = recipe;\n    }\n\n    /**\n     * @param {RecipeNode} recipeNode\n     */\n    removeRecipeByProduct(recipeNode) {\n        removeRecipeNodesDivsRecursive(recipeNode)\n        let index = this.childNodes.indexOf(recipeNode)\n        this.childNodes.splice(index, 1)\n    }\n\n    /**\n     * @param {RecipeNode} newRecipe\n     */\n    addIngredientRecipe(newRecipe) {\n        let foundNode = this.childNodes.find((recipeNode) => recipeNode.mainProduct === newRecipe.mainProduct)\n        if (foundNode !== undefined) {\n            this.removeRecipeByProduct(foundNode)\n        }\n        newRecipe.parentNode = this\n        this.childNodes.push(newRecipe)\n        this.updateSizeRecursive()\n    }\n\n    updateSizeRecursive() {\n        this.size = 0\n        if (this.childNodes.length === 0) {\n            this.size = 1\n        } else {\n            for (let i = 0; i < this.childNodes.length; i++) {\n                this.size += this.childNodes[i].size\n            }\n        }\n        if (this.parentNode !== null) {\n            this.parentNode.updateSizeRecursive()\n        }\n    }\n\n    /**\n     * @param {HTMLElement} cell\n     */\n    setCell(cell) {\n        this.cell = cell\n    }\n\n    /**\n     * @param {string} name\n     * @return {boolean}\n     */\n    hasConnectedRecipeByIngredient(name) {\n        let found = this.childNodes.find((node) => node.mainProduct === name)\n        return found !== undefined;\n    }\n}\n\nfunction render() {\n    let root = document.querySelector('#root-control')\n    renderRecursive(root.recipeNode, new Position())\n}\n\n/**\n * @param {RecipeNode} recipeNode\n * @param {Position} pos\n * @param deepLevel\n */\nfunction renderRecursive(recipeNode, pos, deepLevel = 0) {\n    createOrUpdateCell(pos.x, pos.y, recipeNode, deepLevel)\n    deepLevel++\n    for (let i = 0; i < recipeNode.childNodes.length; i++) {\n        let y = pos.y + i\n        if (i > 0) {\n            y = pos.y + i + (recipeNode.childNodes[i - 1].size - 1)\n        }\n        renderRecursive(\n            recipeNode.childNodes[i],\n            new Position(pos.x + 1, y),\n            deepLevel\n        )\n    }\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @param {?RecipeNode} recipeNode\n * @param {number} deepLevel\n */\nfunction createOrUpdateCell(x, y, recipeNode, deepLevel) {\n    let gridDiv = document.querySelector(\"#grid\")\n    if (recipeNode.cell !== null) {\n        // update only\n        recipeNode.cell.style.left = x * width + (deepLevel) + \"em\"\n        recipeNode.cell.style.top = y * height + \"em\"\n    } else {\n        // create new\n        let cell = document.createElement(\"div\")\n        cell.recipeNode = recipeNode\n        recipeNode.setCell(cell)\n\n        cell.classList.add(\"cell\")\n        cell.style.left = x * width + (deepLevel) + \"em\"\n        cell.style.top = y * height + \"em\"\n\n        let leftDiv = document.createElement('div')\n        leftDiv.classList.add(\"left\")\n        let rightDiv = document.createElement('div')\n        rightDiv.classList.add(\"right\")\n\n        cell.appendChild(leftDiv)\n        cell.appendChild(rightDiv)\n\n        createIngredientDivs(rightDiv, recipeNode)\n\n        let factoryImage = document.createElement('img')\n        factoryImage.src = '/static/images/Assembler.png'\n        leftDiv.appendChild(factoryImage)\n        let factoryCount = document.createElement('div')\n        factoryCount.innerHTML = 'x' + recipeNode.multiplier\n        leftDiv.appendChild(factoryCount)\n\n\n        gridDiv.appendChild(cell)\n        let nodeControl = document.createElement('div')\n        nodeControl.classList.add('selected-node-control')\n        nodeControl.style.display = 'none'\n        cell.nodeControl = nodeControl\n        nodeControl.cell = cell\n        let leftPanel = document.querySelector('#left-panel')\n        leftPanel.appendChild(nodeControl)\n        recipeNode.recipe.ingredients.forEach((ingredient) => {\n            createIngredientRecipeSelector(ingredient, nodeControl)\n        })\n        registerCellEvent()\n    }\n}\n\n\n/**\n * @param {HTMLElement} rightDiv\n * @param {RecipeNode} recipeNode\n */\nfunction createIngredientDivs(rightDiv, recipeNode) {\n    recipeNode.recipe.ingredients.forEach((ingredient) => {\n        let ingredientDiv = document.createElement('div')\n        ingredientDiv.classList.add('ingredient')\n        let w = 100\n        let h = 100\n        let len = recipeNode.recipe.ingredients.length\n        if (len === 2) {\n            w = 50\n        }\n        if (len === 3 || len === 4) {\n            w = 50\n            h = 50\n        }\n        ingredientDiv.style.width = w + '%'\n        ingredientDiv.style.height = h + '%'\n\n        let image = document.createElement('img')\n        image.src = '/static/images/Assembler.png'\n        image.classList.add('image')\n        let countDiv = document.createElement('div')\n        countDiv.classList.add('count')\n        countDiv.style.fontSize = len === 1 ? \"1em\" : \"0.5em\"\n        countDiv.innerHTML = ingredient.amount + '/m'\n        ingredientDiv.appendChild(image)\n        ingredientDiv.appendChild(countDiv)\n        rightDiv.appendChild(ingredientDiv)\n    })\n}\n\n\nwindow.onload = (event) => {\n    fetch(\"/resource-name-list\")\n        .then((response) => response.json())\n        .then((json) => {\n            fillResourceNames(json)\n        })\n        .catch(() => {\n        })\n    let wanted_resource_input = document.querySelector('#wanted_resource_input')\n\n    wanted_resource_input.addEventListener('change', (e) => {\n        clearTree()\n        if (e.target.value === '') {\n            return\n        }\n        fetch('/find-recipe-by-product?product=' + e.target.value)\n            .then((response) => response.json())\n            .then((json) => fillRecipeOptions(json))\n            .catch(error => {\n                clearTree() // ?\n            })\n    })\n    let recipe_select = document.querySelector('#recipe_select')\n    recipe_select.addEventListener('change', (event) => {\n        let recipe = event.target.options[event.target.selectedIndex].recipe\n        fillAmount(recipe)\n        let root = document.querySelector('#root-control')\n        root.recipeNode = new RecipeNode(recipe)\n        root.recipeNode.mainProduct = recipe_select.value\n        render()\n    })\n};\n\nfunction clearTree() {\n    document.querySelector('#recipe_select').style.display = 'none'\n    document.querySelector('#amount').style.display = 'none'\n    document.querySelector('#grid').innerHTML = ''\n    document.querySelector('#root-control').recipeNode = undefined\n    document.querySelectorAll('.cell').forEach((element) => element.remove())\n    document.querySelectorAll('.selected-node-control').forEach((element) => element.remove())\n}\n\nfunction registerCellEvent() {\n    let cells = document.querySelectorAll('.cell')\n    cells.forEach((cell) => cell.addEventListener('click', (event) => {\n        document.querySelectorAll('.selected-node-control').forEach((el) => el.style.display = 'none')\n        event.target.closest('.cell').nodeControl.style.display = 'block'\n    }))\n}\n\n/**\n * @param {Resource} ingredient\n * @param {HTMLElement} nodeControl\n */\nfunction createIngredientRecipeSelector(ingredient, nodeControl) {\n    let ingredientDiv = document.createElement('div')\n    let image = document.createElement('img')\n    let select = document.createElement('select')\n    select.addEventListener('change', (event) => {\n        let recipeNode = nodeControl.cell.recipeNode\n        let newNode = new RecipeNode(event.target.options[event.target.selectedIndex].recipe)\n        newNode.mainProduct = ingredient.name\n        recipeNode.addIngredientRecipe(newNode)\n\n        totalNeeds.add(ingredient.name, ingredient.amount)\n\n        render()\n    })\n    let emptyOption = document.createElement('option')\n    emptyOption.value = ''\n    emptyOption.innerHTML = 'no recipe'\n    select.appendChild(emptyOption)\n    nodeControl.appendChild(ingredientDiv)\n    ingredientDiv.appendChild(image)\n    ingredientDiv.appendChild(select)\n    /** @param {Recipe[]} recipes */\n    let fillSelect = (recipes) => {\n        recipes.forEach((recipe) => {\n            let newOpt = document.createElement('option')\n            newOpt.value = recipe.name\n            newOpt.recipe = recipe\n            newOpt.innerHTML = recipe.displayName\n            select.appendChild(newOpt)\n        })\n    }\n    fetch('/find-recipe-by-product?product=' + ingredient.name)\n        .then((resp) => resp.json())\n        .then((json) => fillSelect(json))\n        .catch(() => {\n        })\n}\n\n/**\n * @param {Recipe} recipe\n */\nfunction fillAmount(recipe) {\n    let amountEl = document.querySelector('#amount')\n    amountEl.style.display = 'block'\n    // add img src\n    let amount_input = document.querySelector(\"#amount_input\")\n    let wanted_input = document.querySelector('#wanted_resource_input')\n    let resource = getProduct(wanted_input.value, recipe.products)\n    amount_input.value = 60 / recipe.manufactoringDuration * resource.amount\n}\n\nclass Resource {\n    name\n    amount\n}\n\n\n/**\n * @param {string} name\n * @param {Resource[]} res\n * @return {?Resource}\n */\nfunction getProduct(name, res) {\n    return res.find((r) => r.name === name, null)\n}\n\nclass Recipe {\n    name = ''\n    displayName = ''\n    /** @type {Resource[]} */\n    ingredients = []\n    /** @type {Resource[]} */\n    products = []\n    manufactoringDuration = 1\n    producedIn = ''\n}\n\n/**\n * @param {Recipe[]} recipes\n */\nfunction fillRecipeOptions(recipes) {\n    let recipe_select = document.querySelector('#recipe_select')\n    recipe_select.innerHTML = ''\n    let emptyOpt = document.createElement('option')\n    emptyOpt.value = ''\n    emptyOpt.innerHTML = 'no recipe'\n    recipe_select.appendChild(emptyOpt)\n    recipe_select.style.display = 'block'\n    recipes.forEach((recipe, index) => {\n        let opt = document.createElement(\"option\")\n        opt.value = recipe.name\n        opt.innerHTML = recipe.displayName\n        opt.recipe = recipe\n        recipe_select.appendChild(opt)\n    })\n}\n\nclass Option {\n    name\n    displayName\n}\n\n/**\n * @param {Option[]} list\n */\nfunction fillResourceNames(list) {\n    let datalist = document.querySelector('#wanted_resource_list')\n    for (let i = 0; i < list.length; i++) {\n        let newOption = document.createElement(\"option\")\n        newOption.value = list[i].name\n        newOption.innerHTML = list[i].displayName\n        datalist.appendChild(newOption)\n    }\n}\n\n\nclass TotalNeeds {\n    /** @type {Map<string, number>} */\n    resources = new Map()\n\n    add(name, amount) {\n        let mapAmount = this.resources.get(name)\n        if (mapAmount !== undefined) {\n            this.resources.set(name, mapAmount + amount)\n        } else {\n            this.resources.set(name, amount)\n        }\n        this.update(name)\n    }\n\n    remove(name, amount) {\n\n    }\n\n    update(name) {\n        let total = document.querySelector('#total')\n        let divs = total.getElementsByTagName('div')\n        let nameDiv = undefined\n        for (let i = 0; i < divs.length; i++) {\n            if (name === divs[i].innerText) {\n                nameDiv = divs[i]\n                break\n            }\n        }\n        // let nameDiv = divs.find((div) => div.innerText === name)\n        if (nameDiv !== undefined) {\n            alert('not implemented')\n        } else {\n            let newTotalDiv = document.createElement('div')\n            let totalNameDiv = document.createElement('div')\n            let totalAmountDiv = document.createElement('div')\n            newTotalDiv.appendChild(totalNameDiv)\n            newTotalDiv.appendChild(totalAmountDiv)\n            total.appendChild(newTotalDiv)\n            totalAmountDiv.innerText = this.resources.get(name) + ''\n        }\n    }\n}\n\nconst width = 10\nconst height = 5\nlet totalNeeds = new TotalNeeds()\n\n\n//# sourceURL=webpack://factory-calc/./front/src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./front/src/main.js"]();
/******/ 	
/******/ })()
;